Frequency-drome
Description

Frequency-drome is defined as a string which when split in the middle, gives two halves having the same characters and same frequency of each character. If there are odd number of characters in the string, we ignore the middle character and check for frequency-drome. For example gaga is a frequency-drome, since the two halves ga and ga have the same characters with same frequency. Also, abccab, rotor and xyzxy are a few examples of frequency-dromes. Note that abbaab is NOT a frequency-drome. The two halves contain the same characters but their frequencies do not match.Your task is simple. Given a string, you need to tell if it is a frequency-drome.


Input
Input Format

The first line contains the number of testcase T

The next T lines contains a string S

Constraints

1<=T<=100

1<=length of S<=1000


Output
For each testcase print "Yes" if the string is frequency-drome , else print "No".


Sample Input 1

3
abbab
bbabbabab
bbaabbaa
Sample Output 1

Yes
No
Yes



SOLUTION--------------------------------------------------------------------------------------------


//Enter code here
import java.util.*;
public class Main {
	static final int charF = 26;
	static boolean freqDrome(String str){
		int[] c1 = new int[charF];
		int[] c2 = new int[charF];
		int n = str.length();
		if (n==1)
			{
			    return true;

			}

		for (int i=0, j=n - 1; i<j; i++, j--){

			c1[str.charAt(i) - 'a']++;
			c2[str.charAt(j) - 'a']++;
		}

		for (int i=0; i<charF; i++)
			if (c1[i] != c2[i])
			{
				return false;
			}

		return true;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int tc = sc.nextInt();
		for (int j = 0; j < tc; j++) {
			String str=sc.next();

			if (freqDrome(str))
				{
				    System.out.println("Yes");

				}
			else
				{
				    System.out.println("No");

				}
		}
	}
}
