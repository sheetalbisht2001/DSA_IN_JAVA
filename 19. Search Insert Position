Search Insert Position
Description

Given a sorted array of distinct integers and a target value, print the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.


Input
Input Format

First-line contains T, no of test cases.

First-line of each test case contains N, the size of the array and target.

Second-line of each test case contains N spaced integers.

Constraints

1 <= T <= 10

1 <= N <= 10^6

0 <= target <= 10^8

0 <= arr[i] <= 10^8


Output
For each test case print the insert position in a new line.


Sample Input 1

3
4 2
1 3 5 6
4 5
1 3 5 6
4 7
1 3 5 6
Sample Output 1

1
2
4
Hint

NA

SOLUTION--------------------------------------------------------------------------------------------------------------



//Enter code here
import java.util.*;

class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        int tc = sc.nextInt();
        for(int j=0; j<tc; j++){
        int n = sc.nextInt();

        int target=sc.nextInt();
        int[] arr = new int[n];

        for(int i=0; i<n; i++){
            arr[i] = sc.nextInt();
        }

        System.out.println(searchInsert(arr,target));

        }
    }
    public static int searchInsert(int[] arr, int target){

        for(int i=0; i<arr.length; i++){
            if(arr[i]==target)
            return i;
            else if(arr[i]>target)
            return i;
        }

          return arr.length;

    }
}
